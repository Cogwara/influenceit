# Generated by Django 5.1.5 on 2025-02-04 14:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('content', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Niche',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='SocialPlatform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('url_pattern', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('user_type', models.CharField(choices=[('seeker', 'Brand/Business'), ('influencer', 'Influencer')], default='seeker', max_length=10)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.MinLengthValidator(10)])),
                ('profile_picture', models.ImageField(default='profile_pictures/default.png', upload_to='profile_pictures/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('website', models.URLField(blank=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_verified', models.BooleanField(default=False)),
                ('company_name', models.CharField(blank=True, max_length=100)),
                ('industry', models.CharField(blank=True, max_length=50)),
                ('company_size', models.CharField(blank=True, max_length=50)),
                ('categories', models.JSONField(default=list)),
                ('social_links', models.JSONField(default=dict)),
                ('audience_demographics', models.JSONField(default=dict)),
                ('average_engagement_rate', models.FloatField(default=0.0)),
                ('total_followers', models.IntegerField(default=0)),
                ('is_brand', models.BooleanField(default=False)),
                ('is_influencer', models.BooleanField(default=False)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InfluencerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('full_name', models.CharField(max_length=255)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('website', models.URLField(blank=True)),
                ('social_links', models.JSONField(blank=True, default=dict)),
                ('followers', models.IntegerField(default=0)),
                ('engagement_rate', models.FloatField(default=0.0)),
                ('audience_demographics', models.JSONField(blank=True, default=dict)),
                ('audience_interests', models.JSONField(blank=True, default=dict)),
                ('audience_authenticity_score', models.FloatField(default=0.0)),
                ('primary_niche', models.CharField(max_length=100)),
                ('content_types', models.JSONField(blank=True, default=dict)),
                ('brand_collaboration_history', models.JSONField(blank=True, default=dict)),
                ('preferred_payment_model', models.CharField(max_length=100)),
                ('rate_card', models.JSONField(blank=True, default=dict)),
                ('availability', models.CharField(max_length=100)),
                ('post_reach', models.IntegerField(default=0)),
                ('impressions', models.IntegerField(default=0)),
                ('engagement_metrics', models.JSONField(blank=True, default=dict)),
                ('rates', models.JSONField()),
                ('metrics', models.JSONField()),
                ('portfolio', models.ManyToManyField(to='content.content')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('niches', models.ManyToManyField(related_name='influencers', to='users.niche')),
                ('platforms', models.ManyToManyField(related_name='influencers', to='users.socialplatform')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('content', models.JSONField()),
                ('read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SeekerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(max_length=255)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos/')),
                ('website', models.URLField(blank=True)),
                ('social_media_links', models.JSONField(blank=True, default=dict)),
                ('industry', models.CharField(max_length=100)),
                ('target_market', models.JSONField()),
                ('company_size', models.CharField(max_length=100)),
                ('primary_marketing_goals', models.JSONField()),
                ('preferred_influencer_type', models.JSONField()),
                ('campaign_budget_range', models.CharField(max_length=100)),
                ('payment_model', models.CharField(max_length=100)),
                ('team_members', models.JSONField(blank=True, default=dict)),
                ('client_profiles', models.JSONField(blank=True, default=dict)),
                ('social_media_accounts', models.JSONField(blank=True, default=dict)),
                ('utm_links', models.JSONField(blank=True, default=dict)),
                ('tracking_pixels', models.JSONField(blank=True, default=dict)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='InfluencerList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('influencers', models.ManyToManyField(to='users.influencerprofile')),
                ('seeker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.seekerprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(max_length=50)),
                ('document_file', models.FileField(upload_to='verification_documents/')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='verification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
